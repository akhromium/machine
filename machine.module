<?php

/**
 * @file
 * Main module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function machine_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the machine module.
    case 'help.page.machine':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Machine - provides configured content entities with <b>machine<b/> base field.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function machine_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Get configured entities.
  $types = \Drupal::configFactory()
    ->get('machine.settings')
    ->get('types') ?: [];

  if (in_array($entity_type->get('id'), $types, TRUE)) {
    $fields['machine'] = BaseFieldDefinition::create('string')
      ->setSettings([
        'default_value' => '',
        'max_length' => 255,
      ])
      ->addConstraint('UniqueField')
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'weight' => 0,
        'type' => 'string_textfield',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setRequired(FALSE)
      ->setTranslatable(FALSE)
      ->setLabel(t('Machine name'))
      ->setDescription(t('Machine name for entity. Allowed: lowercase alphanumeric and underscores.'))
      ->setRevisionable(FALSE)
      ->setPropertyConstraints('value', [
        'Length' => ['max' => 255],
        'Regex'  => ['pattern' => '/^([a-z\d_]+)$/'],
      ]);
  }

  return $fields;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * 'block_content' is a special case that needs special care.
 */
function machine_theme_suggestions_block_alter(&$suggestions, $variables) {
  // Get configured entities.
  $types = \Drupal::configFactory()->get('machine.settings')->get('types') ?: [];

  if (!in_array('block_content', $types)) {
    return;
  }
  $elements = $variables['elements'];

  // Don't process other blocks.
  if (!isset($elements['content']['#block_content'])) {
    return;
  }

  $block_content = $elements['content']['#block_content'];

  $build_suggestions = _machine_create_build_entity_suggestions(
    $block_content,
    $elements['content']['#view_mode']
  );

  $suggestions = array_merge($suggestions, $build_suggestions);
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * Does our configured types checking on suggestion hook.
 * Extends suggestions.
 */
function machine_theme_suggestions_alter(&$suggestions, $variables, $hook) {
  // Get configured entities.
  $types = \Drupal::configFactory()->get('machine.settings')->get('types') ?: [];

  if (!in_array($hook, $types, TRUE)) {
    return;
  }
  $elements = $variables['elements'];

  /* @var $entity \Drupal\Core\Entity\EntityInterface */
  if (!$entity = $elements['#' . $elements['#entity_type']]) {
    return;
  }

  $build_suggestions = _machine_create_build_entity_suggestions(
    $entity,
    $elements['#view_mode'],
    $entity->getType()
  );

  $suggestions = array_merge($suggestions, $build_suggestions);
}

/**
 * Builds new suggestions on given variables.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 * @param string $view_mode
 *   View mode.
 * @param string $bundle
 *   Bundle.
 *
 * @return array
 *   Array of suggestions.
 */
function _machine_create_build_entity_suggestions(
  EntityInterface $entity,
  $view_mode = NULL,
  $bundle = NULL
) {
  $suggestions = [];

  // Don't do anything for empty 'machine' field value.
  if (!$machine = $entity->machine->value) {
    return [];
  }

  $entity_type = $entity->getEntityTypeId();
  $entity_base = empty($bundle) ? $entity_type : implode('__',
    [$entity_type, $bundle]);

  $suggestions[] = implode('__', [$entity_base, $machine]);

  if ($view_mode) {
    $suggestions[] = implode('__', [
      $entity_base,
      $view_mode,
      $machine,
    ]);
  }

  return $suggestions;
}
