<?php

/**
 * @file
 * Contains machine.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function machine_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the machine module.
    case 'help.page.machine':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Machine - provides configured content entities with <b>machine<b/> base field.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 * @return array
 */
function machine_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  $fields = [];

  // Get configured entities.
  $types = \Drupal::configFactory()
    ->get('machine.settings')
    ->get('types') ?? [];

  if(in_array($entity_type->get('id'), $types, true)) {
    $fields['machine'] = Drupal\Core\Field\BaseFieldDefinition::create('string')
      ->setSettings([
        'default_value' => '',
        'max_length' => 255,
      ])
      ->addConstraint('UniqueField')
      ->setDisplayConfigurable('form', true)
      ->setDisplayOptions('form', [
        'weight' => 0,
        'type' => 'string_textfield',
        'settings' => [
          'display_label' => true,
        ],
      ])
      ->setRequired(false)
      ->setTranslatable(false)
      ->setLabel(t('Machine name'))
      ->setDescription(t('Machine name for entity. Allowed: lowercase alphanumeric and underscores.'))
      ->setRevisionable(false)
      ->setPropertyConstraints('value', [
        'Length' => ['max' => 255],
        'Regex' => ['pattern' => '/^([a-z\d_]+)$/']
      ]);
  }

  return $fields;
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * Does our configured types checking on suggestion hook.
 * Extends suggestions.
 *
 * @TODO: Make this code work with 'block_content'.
 */
function machine_theme_suggestions_alter(&$suggestions, $variables, $hook) {
  // Get configured entities.
  $types = \Drupal::configFactory()->get('machine.settings')->get('types') ?? [];

  if(!in_array($hook, $types, true)) return;

  $elements = $variables['elements'];

  // We need entity.
  if(!$entity = $elements['#' . $elements['#entity_type']]) return;

  // Don't do anything for empty 'machine' field value.
  if(!$entity->machine->value) return;

  $suggestions[] = implode('__', [$elements['#entity_type'], $elements['#view_mode'], $entity->machine->value]);
}
